name: config-service/build, push and deploy

on:
  push:
    branches: 
      - main
    paths:
      - 'config-service/**'

  workflow_dispatch:

env:
  SERVICE_NAME: "config-service"

jobs:
  build-and-push:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'


    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get latest Docker Hub tag
      id: latesttag
      run: |
        LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}/tags/" | jq -r '.results[0].name')
        echo "::set-output name=tag::$LATEST_TAG"

    - name: Increment version
      id: incversion
      run: |
        LATEST_VERSION=${{ steps.latesttag.outputs.tag }}
        # Increment the version (Assuming SemVer, increasing the patch version)
        NEW_VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        echo "::set-output name=newversion::$NEW_VERSION"


    - name: Build and push Docker image
      run: |
        cd ${{ env.SERVICE_NAME }} && mvn clean compile package
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ steps.incversion.outputs.newversion }} .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ steps.incversion.outputs.newversion }}
      
    - name: Save new version to file
      run: echo "${{ steps.incversion.outputs.newversion }}" > newversion.txt
  
    - name: Upload new version as artifact
      uses: actions/upload-artifact@v2
      with:
        name: newversion
        path: newversion.txt

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, tiny-eniac]

    steps:

    
    - name: Download new version from artifact
      uses: actions/download-artifact@v2
      with:
        name: newversion

    - name: Set new version as env var
      run: echo "NEW_VERSION=$(cat newversion.txt)" >> $GITHUB_ENV
      
    
    - name: Deploy to Kubernetes
      run: |
        echo "DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}"
        echo "SERVICE_NAME: ${{ env.SERVICE_NAME }}"
        echo "NEW VERSION: $NEW_VERSION"
        
        
        sed -i "s|${{ env.SERVICE_NAME }}:.*|${{ env.SERVICE_NAME }}:$NEW_VERSION|" /home/axiology/usedshop/${{ env.SERVICE_NAME }}.yml
        kubectl apply -f /home/axiology/usedshop/${{ env.SERVICE_NAME }}.yml
